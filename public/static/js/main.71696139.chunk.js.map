{"version":3,"sources":["logo.png","components/Launch.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LAUNCH_QUERY","gql","Launch","flight_number","this","props","match","params","parseInt","query","variables","loading","error","data","console","log","launch","mission_name","launch_year","launch_success","launch_date_local","rocket","rocket_id","rocket_name","rocket_type","className","format","classNames","to","Component","LaunchItem","MissionKey","LAUNCHES_QUERY","Launches","launches","map","key","fligh_number","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71696139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d6a62f0.png\";","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\n\nconst LAUNCH_QUERY = gql`\n  query LAUNCHQUERY($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading....</h4>;\n            if (error) return console.log(error);\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              launch_date_local,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission: </span>\n                  {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Year: {launch_year}-<Moment format=\"MM-DD HH:MM\">\n                      {launch_date_local}\n                    </Moment>\n                  </li>\n                  <li className=\"list-group-item\">\n                    Status:{\" \"}\n                    <span\n                      className={classNames({\n                        \"text-success\": launch_success,\n                        \"text-danger\": !launch_success\n                      })}\n                    >\n                      {launch_success ? \"Succesful Launch\" : \"Faild Launch\"}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr/>\n                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from 'react-moment';\nimport {Link} from 'react-router-dom';\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {\" \"}\n              {mission_name}{\" \"}\n            </span>\n          </h4>\n          <p>Date:<Moment format=\"YYYY-MM-DD HH:MM\">{launch_date_local}</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`}className=\"btn btn-secondary\" >Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-3 bg-success\"/>= Successful Mission\n      </p>\n      <p>\n        <span className=\"px-3 mr-3 bg-danger\"/>= Failed Mission\n      </p>\n    </div>\n  );\n}\n","//class based\nimport React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\nimport MissonKey from \"./MissionKey\"\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\"> Launches</h1>\n        <MissonKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>loading...</h4>;\n            if (error) console.log(error);\n\n            return (\n              <Fragment>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.fligh_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launch from './components/Launch'\nimport Launches from './components/Launches'\nimport './App.css';\nimport logo from './logo.png'\n\nconst client = new ApolloClient({\n  uri:'/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n    <div className=\"container\">\n      <img src={logo} alt=\"SpaceX\" style={{width:300, display:'block', margin:'auto'}} />\n      <Route exact path=\"/\" component={Launches} />\n      <Route exact path=\"/launch/:flight_number\" component={Launch} />\n    </div>\n    </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}